<?php
/**
 * SessionLog
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Leap Play
 *
 * Learn more at https://www.leap-play.com
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.5
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\models;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SessionLog Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SessionLog implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SessionLog';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'station_id' => 'string',
        'session_id' => 'string',
        'requested_by' => 'string',
        'latest_state' => 'string',
        'started_utc' => '\DateTime',
        'reference' => 'string',
        'max_duration_limit' => 'string',
        'ended_utc' => '\DateTime',
        'stopped_by' => 'string',
        'change_requests' => '\Swagger\Client\models\ChangeRequest[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'station_id' => 'uuid',
        'session_id' => 'uuid',
        'requested_by' => null,
        'latest_state' => null,
        'started_utc' => 'date-time',
        'reference' => null,
        'max_duration_limit' => null,
        'ended_utc' => 'date-time',
        'stopped_by' => null,
        'change_requests' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'station_id' => 'stationId',
        'session_id' => 'sessionId',
        'requested_by' => 'requestedBy',
        'latest_state' => 'latestState',
        'started_utc' => 'startedUtc',
        'reference' => 'reference',
        'max_duration_limit' => 'maxDurationLimit',
        'ended_utc' => 'endedUtc',
        'stopped_by' => 'stoppedBy',
        'change_requests' => 'changeRequests'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'station_id' => 'setStationId',
        'session_id' => 'setSessionId',
        'requested_by' => 'setRequestedBy',
        'latest_state' => 'setLatestState',
        'started_utc' => 'setStartedUtc',
        'reference' => 'setReference',
        'max_duration_limit' => 'setMaxDurationLimit',
        'ended_utc' => 'setEndedUtc',
        'stopped_by' => 'setStoppedBy',
        'change_requests' => 'setChangeRequests'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'station_id' => 'getStationId',
        'session_id' => 'getSessionId',
        'requested_by' => 'getRequestedBy',
        'latest_state' => 'getLatestState',
        'started_utc' => 'getStartedUtc',
        'reference' => 'getReference',
        'max_duration_limit' => 'getMaxDurationLimit',
        'ended_utc' => 'getEndedUtc',
        'stopped_by' => 'getStoppedBy',
        'change_requests' => 'getChangeRequests'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const REQUESTED_BY_UNDEFINED = 'Undefined';
    const REQUESTED_BY_SHELL_CLIENT = 'ShellClient';
    const REQUESTED_BY_WEB_API = 'WebApi';
    const LATEST_STATE_REQUESTED = 'Requested';
    const LATEST_STATE_DELIVERED = 'Delivered';
    const LATEST_STATE_STARTED = 'Started';
    const LATEST_STATE_ENDED = 'Ended';
    const LATEST_STATE_CANCELED = 'Canceled';
    const LATEST_STATE_DELIVERY_TIMEOUT = 'DeliveryTimeout';
    const LATEST_STATE_RESPONSE_TIMEOUT = 'ResponseTimeout';
    const STOPPED_BY_UNKNOWN = 'Unknown';
    const STOPPED_BY_USER_LOGOUT = 'UserLogout';
    const STOPPED_BY_REMOTE_LOGOUT = 'RemoteLogout';
    const STOPPED_BY_INACTIVITY = 'Inactivity';
    const STOPPED_BY_STATION_SHUTDOWN = 'StationShutdown';
    const STOPPED_BY_LIMIT_REACHED = 'LimitReached';
    const STOPPED_BY_CONNECTION_LOSS = 'ConnectionLoss';
    const STOPPED_BY_SUBSCRIPTION_ENDED = 'SubscriptionEnded';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRequestedByAllowableValues()
    {
        return [
            self::REQUESTED_BY_UNDEFINED,
            self::REQUESTED_BY_SHELL_CLIENT,
            self::REQUESTED_BY_WEB_API,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLatestStateAllowableValues()
    {
        return [
            self::LATEST_STATE_REQUESTED,
            self::LATEST_STATE_DELIVERED,
            self::LATEST_STATE_STARTED,
            self::LATEST_STATE_ENDED,
            self::LATEST_STATE_CANCELED,
            self::LATEST_STATE_DELIVERY_TIMEOUT,
            self::LATEST_STATE_RESPONSE_TIMEOUT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStoppedByAllowableValues()
    {
        return [
            self::STOPPED_BY_UNKNOWN,
            self::STOPPED_BY_USER_LOGOUT,
            self::STOPPED_BY_REMOTE_LOGOUT,
            self::STOPPED_BY_INACTIVITY,
            self::STOPPED_BY_STATION_SHUTDOWN,
            self::STOPPED_BY_LIMIT_REACHED,
            self::STOPPED_BY_CONNECTION_LOSS,
            self::STOPPED_BY_SUBSCRIPTION_ENDED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['station_id'] = isset($data['station_id']) ? $data['station_id'] : null;
        $this->container['session_id'] = isset($data['session_id']) ? $data['session_id'] : null;
        $this->container['requested_by'] = isset($data['requested_by']) ? $data['requested_by'] : null;
        $this->container['latest_state'] = isset($data['latest_state']) ? $data['latest_state'] : null;
        $this->container['started_utc'] = isset($data['started_utc']) ? $data['started_utc'] : null;
        $this->container['reference'] = isset($data['reference']) ? $data['reference'] : null;
        $this->container['max_duration_limit'] = isset($data['max_duration_limit']) ? $data['max_duration_limit'] : null;
        $this->container['ended_utc'] = isset($data['ended_utc']) ? $data['ended_utc'] : null;
        $this->container['stopped_by'] = isset($data['stopped_by']) ? $data['stopped_by'] : null;
        $this->container['change_requests'] = isset($data['change_requests']) ? $data['change_requests'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getRequestedByAllowableValues();
        if (!is_null($this->container['requested_by']) && !in_array($this->container['requested_by'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'requested_by', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLatestStateAllowableValues();
        if (!is_null($this->container['latest_state']) && !in_array($this->container['latest_state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'latest_state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStoppedByAllowableValues();
        if (!is_null($this->container['stopped_by']) && !in_array($this->container['stopped_by'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'stopped_by', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets station_id
     *
     * @return string
     */
    public function getStationId()
    {
        return $this->container['station_id'];
    }

    /**
     * Sets station_id
     *
     * @param string $station_id station_id
     *
     * @return $this
     */
    public function setStationId($station_id)
    {
        $this->container['station_id'] = $station_id;

        return $this;
    }

    /**
     * Gets session_id
     *
     * @return string
     */
    public function getSessionId()
    {
        return $this->container['session_id'];
    }

    /**
     * Sets session_id
     *
     * @param string $session_id session_id
     *
     * @return $this
     */
    public function setSessionId($session_id)
    {
        $this->container['session_id'] = $session_id;

        return $this;
    }

    /**
     * Gets requested_by
     *
     * @return string
     */
    public function getRequestedBy()
    {
        return $this->container['requested_by'];
    }

    /**
     * Sets requested_by
     *
     * @param string $requested_by requested_by
     *
     * @return $this
     */
    public function setRequestedBy($requested_by)
    {
        $allowedValues = $this->getRequestedByAllowableValues();
        if (!is_null($requested_by) && !in_array($requested_by, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'requested_by', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['requested_by'] = $requested_by;

        return $this;
    }

    /**
     * Gets latest_state
     *
     * @return string
     */
    public function getLatestState()
    {
        return $this->container['latest_state'];
    }

    /**
     * Sets latest_state
     *
     * @param string $latest_state latest_state
     *
     * @return $this
     */
    public function setLatestState($latest_state)
    {
        $allowedValues = $this->getLatestStateAllowableValues();
        if (!is_null($latest_state) && !in_array($latest_state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'latest_state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['latest_state'] = $latest_state;

        return $this;
    }

    /**
     * Gets started_utc
     *
     * @return \DateTime
     */
    public function getStartedUtc()
    {
        return $this->container['started_utc'];
    }

    /**
     * Sets started_utc
     *
     * @param \DateTime $started_utc started_utc
     *
     * @return $this
     */
    public function setStartedUtc($started_utc)
    {
        $this->container['started_utc'] = $started_utc;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string $reference reference
     *
     * @return $this
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets max_duration_limit
     *
     * @return string
     */
    public function getMaxDurationLimit()
    {
        return $this->container['max_duration_limit'];
    }

    /**
     * Sets max_duration_limit
     *
     * @param string $max_duration_limit max_duration_limit
     *
     * @return $this
     */
    public function setMaxDurationLimit($max_duration_limit)
    {
        $this->container['max_duration_limit'] = $max_duration_limit;

        return $this;
    }

    /**
     * Gets ended_utc
     *
     * @return \DateTime
     */
    public function getEndedUtc()
    {
        return $this->container['ended_utc'];
    }

    /**
     * Sets ended_utc
     *
     * @param \DateTime $ended_utc ended_utc
     *
     * @return $this
     */
    public function setEndedUtc($ended_utc)
    {
        $this->container['ended_utc'] = $ended_utc;

        return $this;
    }

    /**
     * Gets stopped_by
     *
     * @return string
     */
    public function getStoppedBy()
    {
        return $this->container['stopped_by'];
    }

    /**
     * Sets stopped_by
     *
     * @param string $stopped_by stopped_by
     *
     * @return $this
     */
    public function setStoppedBy($stopped_by)
    {
        $allowedValues = $this->getStoppedByAllowableValues();
        if (!is_null($stopped_by) && !in_array($stopped_by, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'stopped_by', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['stopped_by'] = $stopped_by;

        return $this;
    }

    /**
     * Gets change_requests
     *
     * @return \Swagger\Client\models\ChangeRequest[]
     */
    public function getChangeRequests()
    {
        return $this->container['change_requests'];
    }

    /**
     * Sets change_requests
     *
     * @param \Swagger\Client\models\ChangeRequest[] $change_requests change_requests
     *
     * @return $this
     */
    public function setChangeRequests($change_requests)
    {
        $this->container['change_requests'] = $change_requests;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


