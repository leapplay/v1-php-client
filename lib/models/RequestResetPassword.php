<?php
/**
 * RequestResetPassword
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Leap Play
 *
 * Learn more at https://www.leap-play.com
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.5
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\models;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * RequestResetPassword Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RequestResetPassword implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RequestResetPassword';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'username' => 'string',
        'password_reset_token' => 'string',
        'new_password' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'username' => null,
        'password_reset_token' => null,
        'new_password' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'username' => 'username',
        'password_reset_token' => 'passwordResetToken',
        'new_password' => 'newPassword'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'username' => 'setUsername',
        'password_reset_token' => 'setPasswordResetToken',
        'new_password' => 'setNewPassword'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'username' => 'getUsername',
        'password_reset_token' => 'getPasswordResetToken',
        'new_password' => 'getNewPassword'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['username'] = isset($data['username']) ? $data['username'] : null;
        $this->container['password_reset_token'] = isset($data['password_reset_token']) ? $data['password_reset_token'] : null;
        $this->container['new_password'] = isset($data['new_password']) ? $data['new_password'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['username'] === null) {
            $invalidProperties[] = "'username' can't be null";
        }
        if ((mb_strlen($this->container['username']) > 30)) {
            $invalidProperties[] = "invalid value for 'username', the character length must be smaller than or equal to 30.";
        }

        if ((mb_strlen($this->container['username']) < 8)) {
            $invalidProperties[] = "invalid value for 'username', the character length must be bigger than or equal to 8.";
        }

        if ($this->container['password_reset_token'] === null) {
            $invalidProperties[] = "'password_reset_token' can't be null";
        }
        if ((mb_strlen($this->container['password_reset_token']) > 350)) {
            $invalidProperties[] = "invalid value for 'password_reset_token', the character length must be smaller than or equal to 350.";
        }

        if ((mb_strlen($this->container['password_reset_token']) < 100)) {
            $invalidProperties[] = "invalid value for 'password_reset_token', the character length must be bigger than or equal to 100.";
        }

        if ($this->container['new_password'] === null) {
            $invalidProperties[] = "'new_password' can't be null";
        }
        if ((mb_strlen($this->container['new_password']) > 80)) {
            $invalidProperties[] = "invalid value for 'new_password', the character length must be smaller than or equal to 80.";
        }

        if ((mb_strlen($this->container['new_password']) < 10)) {
            $invalidProperties[] = "invalid value for 'new_password', the character length must be bigger than or equal to 10.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets username
     *
     * @return string
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string $username username
     *
     * @return $this
     */
    public function setUsername($username)
    {
        if ((mb_strlen($username) > 30)) {
            throw new \InvalidArgumentException('invalid length for $username when calling RequestResetPassword., must be smaller than or equal to 30.');
        }
        if ((mb_strlen($username) < 8)) {
            throw new \InvalidArgumentException('invalid length for $username when calling RequestResetPassword., must be bigger than or equal to 8.');
        }

        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets password_reset_token
     *
     * @return string
     */
    public function getPasswordResetToken()
    {
        return $this->container['password_reset_token'];
    }

    /**
     * Sets password_reset_token
     *
     * @param string $password_reset_token password_reset_token
     *
     * @return $this
     */
    public function setPasswordResetToken($password_reset_token)
    {
        if ((mb_strlen($password_reset_token) > 350)) {
            throw new \InvalidArgumentException('invalid length for $password_reset_token when calling RequestResetPassword., must be smaller than or equal to 350.');
        }
        if ((mb_strlen($password_reset_token) < 100)) {
            throw new \InvalidArgumentException('invalid length for $password_reset_token when calling RequestResetPassword., must be bigger than or equal to 100.');
        }

        $this->container['password_reset_token'] = $password_reset_token;

        return $this;
    }

    /**
     * Gets new_password
     *
     * @return string
     */
    public function getNewPassword()
    {
        return $this->container['new_password'];
    }

    /**
     * Sets new_password
     *
     * @param string $new_password new_password
     *
     * @return $this
     */
    public function setNewPassword($new_password)
    {
        if ((mb_strlen($new_password) > 80)) {
            throw new \InvalidArgumentException('invalid length for $new_password when calling RequestResetPassword., must be smaller than or equal to 80.');
        }
        if ((mb_strlen($new_password) < 10)) {
            throw new \InvalidArgumentException('invalid length for $new_password when calling RequestResetPassword., must be bigger than or equal to 10.');
        }

        $this->container['new_password'] = $new_password;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


