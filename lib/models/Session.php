<?php
/**
 * Session
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Leap Play
 *
 * Learn more at https://www.leap-play.com
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.5
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\models;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Session Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Session implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Session';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'session_id' => 'string',
        'reference' => 'string',
        'state' => 'string',
        'started_on_utc' => '\DateTime',
        'start_duration' => 'string',
        'max_duration_limit' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'session_id' => 'uuid',
        'reference' => null,
        'state' => null,
        'started_on_utc' => 'date-time',
        'start_duration' => null,
        'max_duration_limit' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'session_id' => 'sessionId',
        'reference' => 'reference',
        'state' => 'state',
        'started_on_utc' => 'startedOnUtc',
        'start_duration' => 'startDuration',
        'max_duration_limit' => 'maxDurationLimit'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'session_id' => 'setSessionId',
        'reference' => 'setReference',
        'state' => 'setState',
        'started_on_utc' => 'setStartedOnUtc',
        'start_duration' => 'setStartDuration',
        'max_duration_limit' => 'setMaxDurationLimit'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'session_id' => 'getSessionId',
        'reference' => 'getReference',
        'state' => 'getState',
        'started_on_utc' => 'getStartedOnUtc',
        'start_duration' => 'getStartDuration',
        'max_duration_limit' => 'getMaxDurationLimit'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATE_REQUESTED = 'Requested';
    const STATE_DELIVERED = 'Delivered';
    const STATE_STARTED = 'Started';
    const STATE_ENDED = 'Ended';
    const STATE_CANCELED = 'Canceled';
    const STATE_DELIVERY_TIMEOUT = 'DeliveryTimeout';
    const STATE_RESPONSE_TIMEOUT = 'ResponseTimeout';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_REQUESTED,
            self::STATE_DELIVERED,
            self::STATE_STARTED,
            self::STATE_ENDED,
            self::STATE_CANCELED,
            self::STATE_DELIVERY_TIMEOUT,
            self::STATE_RESPONSE_TIMEOUT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['session_id'] = isset($data['session_id']) ? $data['session_id'] : null;
        $this->container['reference'] = isset($data['reference']) ? $data['reference'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['started_on_utc'] = isset($data['started_on_utc']) ? $data['started_on_utc'] : null;
        $this->container['start_duration'] = isset($data['start_duration']) ? $data['start_duration'] : null;
        $this->container['max_duration_limit'] = isset($data['max_duration_limit']) ? $data['max_duration_limit'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets session_id
     *
     * @return string
     */
    public function getSessionId()
    {
        return $this->container['session_id'];
    }

    /**
     * Sets session_id
     *
     * @param string $session_id session_id
     *
     * @return $this
     */
    public function setSessionId($session_id)
    {
        $this->container['session_id'] = $session_id;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string $reference reference
     *
     * @return $this
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state state
     *
     * @return $this
     */
    public function setState($state)
    {
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($state) && !in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets started_on_utc
     *
     * @return \DateTime
     */
    public function getStartedOnUtc()
    {
        return $this->container['started_on_utc'];
    }

    /**
     * Sets started_on_utc
     *
     * @param \DateTime $started_on_utc started_on_utc
     *
     * @return $this
     */
    public function setStartedOnUtc($started_on_utc)
    {
        $this->container['started_on_utc'] = $started_on_utc;

        return $this;
    }

    /**
     * Gets start_duration
     *
     * @return string
     */
    public function getStartDuration()
    {
        return $this->container['start_duration'];
    }

    /**
     * Sets start_duration
     *
     * @param string $start_duration start_duration
     *
     * @return $this
     */
    public function setStartDuration($start_duration)
    {
        $this->container['start_duration'] = $start_duration;

        return $this;
    }

    /**
     * Gets max_duration_limit
     *
     * @return string
     */
    public function getMaxDurationLimit()
    {
        return $this->container['max_duration_limit'];
    }

    /**
     * Sets max_duration_limit
     *
     * @param string $max_duration_limit max_duration_limit
     *
     * @return $this
     */
    public function setMaxDurationLimit($max_duration_limit)
    {
        $this->container['max_duration_limit'] = $max_duration_limit;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


